package com.fissionworks.ddtutils.data.generator;

import org.apache.commons.lang3.Validate;

/**
 * RandomIntegerBuilder allows the creation of a random integer, based on a set of parameters specified using
 * the builder pattern. If {@link #build()} is called without setting any parameters, an integer between
 * {@link Integer#MIN_VALUE} and {@link Integer#MAX_VALUE} is generated by default.
 *
 * @since 1.0.0
 *
 */
public final class RandomIntegerBuilder {

    private long maximum = Integer.MAX_VALUE;
    private long minimum = Integer.MIN_VALUE;

    /**
     * Creates a randomized integer based on all previously set parameters. If no parameters are set, the
     * default behavior is to generate an integer between {@link Integer#MIN_VALUE} and
     * {@link Integer#MAX_VALUE}.
     *
     * @return A randomized integer based on the parameters that have been set.
     * @since 1.0.0
     */
    public int build() {
        return (int) (minimum + (long) (Math.random() * ((maximum - minimum) + 1)));
    }

    /**
     * Specifies a range between which the desired integer should fall.
     *
     * @param minValue
     *            The minimum value desired for the random integer.
     * @param maxValue
     *            The maximum value desired for the random integer.
     * @return Returns "this" as part of the builder pattern.
     * @since 1.0.0
     */
    public RandomIntegerBuilder range(final int minValue, final int maxValue) {
        Validate.isTrue(maxValue > minValue, "The maxValue must be greater than the minValue");
        minimum = minValue;
        maximum = maxValue;
        return this;
    }
}
